Intended command-line usage:

Pick slices:
X  --all           -- all (slice) moves, for a UI, including centers
X  --outerblock    -- outer block turn moves only
X  --vertex        -- vertex moves only (for tetrahedron)
   --moves U,R,F   -- see below; pick specific moves
Eliminate moves:
X  --nocorners     -- kill any corner sets
X  --noedges       -- kill any edge sets
X  --nocenters     -- kill any center sets
   --fixcorner     -- fix the first corner
   --fixcorners    -- fix all corners
   --fixedge       -- fix the first edge
   --fixcenter     -- fix the first center
   --fixcenters    -- fix all centers

Then for move selection we want to be able to do the following types
of things:

   --moves U,R,F           -- only include U, R, and F face moves
   --moves URB,ULF,DRF,DLB -- only include one tetrad of moves
   --moves U2,R            -- include only U2 and R
   --moves U2,F2,R2,D2,B2,L2 -- include only square moves (but all square moves)

so just be explicit in move list.

Ksolve.js:

* Fix missing ori issue // Lucas

* Fix identical color rendering issue // Lucas

* Write ksolve->ksolve simplification code

* Make sure that few-color (i.e., 3-color) cube works, even with
  random orientations; does mixing identical pieces and orientations
  break us?

PuzzleGeometry:

* Limit moves option; applies to gap, ksolve, ss.  This should be
  general enough that the moves we list are synthesized as needed,
  and should support outer block moves, slice moves, as well as
  vertex/face/edge names based on the given net.  It should also
  support suffixes (so U2 means just double-spins of U).

* Limit pieces option.  For now just use corners, edges, centers.

* Add methods to override default net, colors, move names

* Add timeout or some such to schreier-sims

SVG rendering

* Use simple affine transforms and radix ordering for 3D rendering

* Add 3D partial move and slice rendering based on this

* Consider grouping facelets so we can transform them as one face

Theory

* Generalized symmetry and symmetry^2 reductions

* Make schreier-sims generate shorter sequences

* Optimal solving for simple puzzles; two-phase for bigger, three phase,
  etc.

* Coset solvers for puzzles

* Subpuzzle analysis (corners-only, perms only, orient without perms, etc.)

* Check facelet colors for editing

* Schreier-sims on combined subsets of pieces

* Algo searches: by position order, by restricting distinct grips; search
  for three-swaps, two-swaps, and orientation fixes

UI

* Use linear gradients rather than circles, that stick out from center
  of rotation

* Add randomize, reset

* Highlight edges when making, about to make, a move

* Separate faces (thicker outlines, or actually space them)

* Add 3D/net/single face display

* Option to "regularize" puzzle: same puzzle, but make smallest sticker
  as large as possible (maybe on face edit screen)

* Allow manipulation of cuts in single-face display with mouse

* Allow display/elimination of negligible facelets

* Add algorithm display, edit

* Add face names and/or move names superimposed

* Allow named algorithm macros (i.e., Sune)

* Add access to schreier-sims

* Fix default color on non-cubicle puzzles

* Simulation UI (mouse moves) on desktop, mobile

* Drag moves vs click moves; touch vs mouse+keyboard

* State/sequence import/export

* Facelet color editing

ksolve:

* Fix bugs; doesn't work with 24-cube

* Speed improvements

Improve epsilon management; ensure we don't loop forever if something
goes wrong with epsilon calculations; add too-small-face warning or
something of that nature.

Generate flattened SVG net representation to integrate with Lucas

Generate pcubes format for puzzles?

Note:  Gelatinbrain/Magic Polyhedra does almost everything better at
this point . . .

Catchup
   Add GAP file generation
   Add ksolve file generation

Presentation
   Add one-face display
   Add borders between faces somehow

Simulation
   Add movement
   Add scrambling
   Add solve detection

Computation
   Figure out how to deal with puzzle rotations
   Figure out how to deal with identical pieces
   Figure out how to deal with multi-solution puzzles (dino)
   Give face/move names
   Approximate size of puzzle state
   Refine size of puzzle state
   Metrics:  OBTM, SSTM, STM
   Explore distance counts

For complicated puzzles, rather than making so many faces at the 3D
layer, instead use fewer faces and use texturing to draw stickers and
sticker separations.

Don't limit move "planes" to slices; allow the move planes to be a
polytope symmetric around a line from the center of the puzzle.  This
permits us to build a lot more puzzles without increasing the sticker
count like crazy.

Permit move planes to be curved surfaces rather than slices (maybe
rotated splines).  See this for example:

   http://www.brandonenright.net/cgi-bin/jaaps_povray.pl

Similar things:

gelatinbrain/magic polyhedra

Excellent UI, movement, macros/recording, etc.  For instance, where
   on a sticker you click influences what move is executed (so not
   always the same for a given sticker).
No apparent keystroke support
Requires Windows/Linux/Mac (not webified)
Puzzles are compiled-in; can't add one dynamically
No jumbling, but tons of extra features
Tracks move sequence; can copy, edit, etc. (But move encoding not "standard")
Hundreds of puzzles already

pcubes

Windows-only
Puzzles defined in XML, with custom scripting language for fancy features
   (and even for normal features)
Hundreds of puzzles already
Probably the best, most general program there is right now
Descriptions are not very concise; based on calculating and explicitly
   listing faces/vertices rather than exploiting symmetry
Drag-based moves are painful; no obvious keyboard moves
No obvious way to extract move sequences, etc.  (No encoding of moves).

Massive effort is going into, and has gone into, the pcubes program
from a wide variety of sources.

Where we want to differ:

Cubeexplorer for pcubes/gelatinbrain; plus mobile/touchscreen UI
Interchange formats for permutations, graphics, etc.

I'm mostly interested in computer solving/exploration.  So we want to
generate GAP and ksolve input files, we want to do cube-explorer type
things.  I'm more interested in this than in going crazy with all
possible puzzle types.  On the other hand, exploring the *space* of
puzzles (i.e., Platonic solids with cuts) is very interesting to me.

External libraries:

twistysim.js:

Cannot determine license terms
Can't find original (unobfuscated sources)
Drops keystrokes when animating (very frustrating)
Rendering can be slow for big puzzles (svg/DOM)
Unintuitive mouse moves
Shows back of stickers *colored* during twists
No true slice turns (touch only works for simple cases)
Uses control for reverse moves; can't use shift to distinguish moves

three.js:

Fast!  Even for bigger puzzles
Have to do so much rendering work ourselves
Marks between faces not rendered
