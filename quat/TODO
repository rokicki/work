Generate flattened SVG net representation to integrate with Lucas

Catchup
   Add GAP file generation
   Add ksolve file generation

Presentation
   Add one-face display
   Add borders between faces somehow

Simulation
   Add movement
   Add scrambling
   Add solve detection

Computation
   Figure out how to deal with puzzle rotations
   Figure out how to deal with identical pieces
   Figure out how to deal with multi-solution puzzles (dino)
   Give face/move names
   Approximate size of puzzle state
   Refine size of puzzle state
   Metrics:  OBTM, SSTM, STM
   Explore distance counts

For complicated puzzles, rather than making so many faces at the 3D
layer, instead use fewer faces and use texturing to draw stickers and
sticker separations.

Status:

3x3x3 ksolve works
2x2x2 ksolve works
skewb, dino work for the most part but can't support all the different
   solving orientations yet (too many states)
megaminx fails when ksolve tries to compute orientation table; too many
   orientations
helicoper doesn't understand identical positions

External libraries:

twistysim.js:

Cannot determine license terms
Can't find original (unobfuscated sources)
Rendering can be slow for big puzzles (svg/DOM)
Unintuitive mouse moves
Shows back of stickers *colored* during twists
No true slice turns (touch only works for simple cases)

three.js:

Fast!  Even for bigger puzzles
Have to do so much rendering work ourselves
Marks between faces not rendered
